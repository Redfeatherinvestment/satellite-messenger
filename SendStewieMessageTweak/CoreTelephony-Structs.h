/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, November 15, 2023 at 5:36:38 PM Eastern European Standard Time
* Operating System: Version 17.1 (Build 21B74)
* Image Source: /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony
* classdump-dyld is licensed under GPLv3, Copyright © 2013-2016 by Elias Limneos.
*/

typedef struct _NSZone* NSZoneRef;

typedef struct object {
	dispatch_object_s fObj;
} object;

typedef struct queue {
	object fObj;
} queue;

typedef struct {
	int field1;
	int field2;
} SCD_Struct_CT3;

typedef struct _tree_end_node<std::__tree_node_base<void *> *> {
	void __left_;
} tree_end_node<std::__tree_node_base<void *> *>;

typedef struct _compressed_pair<unsigned long, std::__map_value_compare<__unsafe_unretained id, std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>, std::less<__unsafe_unretained id>>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__map_value_compare<__unsafe_unretained id, std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>, std::less<__unsafe_unretained id>>>;

typedef struct _compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>, void *>>> {
	tree_end_node<std::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>, void *>>>;

typedef struct _tree<std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>, std::__map_value_compare<__unsafe_unretained id, std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>, std::less<__unsafe_unretained id>>, std::allocator<std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>>> {
	void __begin_node_;
	compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__map_value_compare<__unsafe_unretained id, std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>, std::less<__unsafe_unretained id>>> __pair3_;
} tree<std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>, std::__map_value_compare<__unsafe_unretained id, std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>, std::less<__unsafe_unretained id>>, std::allocator<std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>>>;

typedef struct map<__unsafe_unretained id, (anonymous namespace)::DelegateContext, std::less<__unsafe_unretained id>, std::allocator<std::pair<const __unsafe_unretained id, (anonymous namespace)::DelegateContext>>> {
	tree<std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>, std::__map_value_compare<__unsafe_unretained id, std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>, std::less<__unsafe_unretained id>>, std::allocator<std::__value_type<__unsafe_unretained id, (anonymous namespace)::DelegateContext>>> __tree_;
} map<__unsafe_unretained id, (anonymous namespace)::DelegateContext, std::less<__unsafe_unretained id>, std::allocator<std::pair<const __unsafe_unretained id, (anonymous namespace)::DelegateContext>>>;

typedef struct _compressed_pair<unsigned long, std::__map_value_compare<__CTAssertionType *, std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>, std::less<__CTAssertionType *>>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__map_value_compare<__CTAssertionType *, std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>, std::less<__CTAssertionType *>>>;

typedef struct _compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>, void *>>> {
	tree_end_node<std::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>, void *>>>;

typedef struct _tree<std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>, std::__map_value_compare<__CTAssertionType *, std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>, std::less<__CTAssertionType *>>, std::allocator<std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>>> {
	void __begin_node_;
	compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__map_value_compare<__CTAssertionType *, std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>, std::less<__CTAssertionType *>>> __pair3_;
} tree<std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>, std::__map_value_compare<__CTAssertionType *, std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>, std::less<__CTAssertionType *>>, std::allocator<std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>>>;

typedef struct map<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>, std::less<__CTAssertionType *>, std::allocator<std::pair<__CTAssertionType *const, std::pair<dispatch::queue, void ()(NSError *)>>>> {
	tree<std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>, std::__map_value_compare<__CTAssertionType *, std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>, std::less<__CTAssertionType *>>, std::allocator<std::__value_type<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>>>> __tree_;
} map<__CTAssertionType *, std::pair<dispatch::queue, void ()(NSError *)>, std::less<__CTAssertionType *>, std::allocator<std::pair<__CTAssertionType *const, std::pair<dispatch::queue, void ()(NSError *)>>>>;

typedef struct __CFAllocator* CFAllocatorRef;

typedef struct dispatch_queue_s* dispatch_queue_sRef;

typedef struct __CTCall* CTCallRef;

typedef struct {
	BOOL field1;
	BOOL field2;
} SCD_Struct_Co16;

typedef struct _compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>, std::less<std::string>>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>, std::less<std::string>>>;

typedef struct _compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>, void *>>> {
	tree_end_node<std::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>, void *>>>;

typedef struct _tree<std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>, std::__map_value_compare<std::string, std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>, std::less<std::string>>, std::allocator<std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>>> {
	void __begin_node_;
	compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>, std::less<std::string>>> __pair3_;
} tree<std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>, std::__map_value_compare<std::string, std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>, std::less<std::string>>, std::allocator<std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>>>;

typedef struct map<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>, std::less<std::string>, std::allocator<std::pair<const std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>>> {
	tree<std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>, std::__map_value_compare<std::string, std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>, std::less<std::string>>, std::allocator<std::__value_type<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>>> __tree_;
} map<std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>, std::less<std::string>, std::allocator<std::pair<const std::string, dispatch::block<void ()(CTStewieMessageAck *, NSDictionary *)>>>>;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct network_usage_policy_client_s* network_usage_policy_client_sRef;